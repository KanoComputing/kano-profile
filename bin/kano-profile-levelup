#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

## TEST COMMAND
# ./kano-profile-levelup level:5 badges:application:bug_buster environments:all:fields_of_ideas avatars:judoka:judoka_1 avatars:judoka:judoka_2

import os
import sys
if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.profile.badges import load_badge_rules
from kano.world.functions import get_mixed_username
from gi.repository import Gtk, Gdk
from kano_profile_gui.images import get_image
from kano_profile_gui.paths import css_dir

all_rules = load_badge_rules()
categories = ['badges', 'avatars', 'environments']


class MainWindow(Gtk.Window):
    def __init__(self, new_level, new_items):
        Gtk.Window.__init__(self, title='Kano-Success')

        self.image_width = 590
        self.image_height = 270
        self.window_height = 440
        self.set_size_request(self.image_width, self.window_height)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_decorated(False)
        self.set_resizable(False)
        self.state = 0

        # Get username
        username = get_mixed_username()

        self.title = Gtk.Label("Great job " + str(username) + "!")
        self.title.get_style_context().add_class("alert_title")
        self.description = Gtk.Label("")
        self.description.get_style_context().add_class("alert_description")

        self.label_container = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=2)
        self.label_container.pack_start(self.title, False, False, 0)
        self.label_container.pack_start(self.description, False, False, 0)

        self.button = Gtk.Button("GOT IT")
        self.button.get_style_context().add_class("green_button")
        self.button_box = Gtk.Box()
        self.button_box.add(self.button)
        self.button_alignment = Gtk.Alignment(xscale=1, yscale=1, xalign=0.5, yalign=0.5)
        self.button_alignment.set_padding(0, 0, (self.image_width / 2) - 40, 0)
        self.button_alignment.add(self.button_box)
        self.button.connect("clicked", self.go_to_next, new_items)

        self.image = Gtk.Image()

        self.background = Gtk.EventBox()
        self.background.set_size_request(self.image_width, self.image_height)
        self.background.add(self.image)

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.box.pack_start(self.background, False, False, 0)
        self.box.pack_start(self.label_container, False, False, 20)
        self.box.pack_start(self.button_alignment, False, False, 0)

        self.add(self.box)

        if new_level:
            # Get image, title and label for new level
            self.set_description("new_level", str(new_level))
            # temporary filename for level up
            filename = get_image("level", "", "level-1", str(self.image_width) + 'x' + str(self.image_height))
            self.image.set_from_file(filename)
        else:
            self.go_to_next(None, new_items)

    def go_to_next(self, event=None, new_items=None):

        if self.state >= 3:
            close_window()
            exit()

        # This doesn't work reliably because if environments aren't included,
        # then the final unlocked swag is not in self.state = 2
        elif self.state == 2:
            self.button.set_label("FINISH")

        category = categories[self.state]
        size_folder = str(self.image_width) + 'x' + str(self.image_height)
        category = categories[self.state]
        filename = ""
        text = ""
        background_color = Gdk.RGBA()

        if category in new_items:
            for subcat, items in new_items[category].iteritems():
                for item, rules in items.iteritems():
                    filename = get_image(category, subcat, item, size_folder)
                    text = rules["title"]
                    color_string = '#' + rules["bg_color"]
                    background_color.parse(color_string)
        else:
            self.state = self.state + 1
            self.go_to_next(None, new_items)
            return

        self.background.override_background_color(Gtk.StateFlags.NORMAL, background_color)

        if category == "avatars":
            filename = get_image(category, "", "avatar", size_folder)

        self.image.set_from_file(filename)
        self.set_description(category, text)
        self.state = self.state + 1

    def set_description(self, category, text):
        if category == "new_level":
            self.description.set_text("You've reached Level " + text)
        else:
            self.description.set_text("You've unlocked " + text)


def parse_items(args):
    new_level = None
    new_items = dict()

    for arg in args:
        split = arg.split(':')
        if split[0] == 'level':
            new_level = int(split[1])
        elif split[0] in ['badges', 'avatars', 'environments']:
            category, subcat, item = split
            try:
                new_items.setdefault(category, dict()).setdefault(subcat, dict())[item] \
                    = all_rules[category][subcat][item]
            except Exception:
                print 'item not found: {} {} {}'.format(category, subcat, item)
    return new_level, new_items


def main():
    os.system("/usr/bin/kdesk -b")

    new_level, new_items = parse_items(sys.argv[1:])

    # Create style sheet
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(css_dir, 'login.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    win = MainWindow(new_level, new_items)
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


def close_window():
    os.system("/usr/bin/kdesk -b")
    Gtk.main_quit()


if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit('Nothing to display!')
    main()
