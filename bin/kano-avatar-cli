#!/usr/bin/env python
#
# kano-avatar-cli
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import sys
import os
import argparse

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_avatar.logic import AvatarConfParser, AvatarCreator, get_avatar_conf
from kano.logging import logger

program_desc = "This program handles the creation of an avatar for a user of Kano World"

configuration = get_avatar_conf()

if configuration is None:
    logger.error('Error configuration was not loaded, check configuration file')
    sys.exit(1)


def main():
    parser = argparse.ArgumentParser(description=program_desc)
    group_view = parser.add_argument_group('View', 'View available choices')
    group_view.add_argument('-l', '--list',
                            choices=['char', 'obj', 'env', 'cat', 'spec_cat', 'all'],
                            help='List available choices for characters (char),objects (obj), categories(cat) or all (all).')
    group_create = parser.add_argument_group('Create', 'Create a new avatar')
    group_create.add_argument('-c', '--create',
                              type=str,
                              nargs='+',
                              help='Create a new character, specify the character name followed by the objects')
    group_create.add_argument('-a', '--circular',
                              action='store_true',
                              help='Generate circular assets as well')
    group_create.add_argument('-e', '--environment',
                              type=str,
                              default='',
                              help='Set environment (background) for the avatar')
    group_create.add_argument('-o', '--output',
                              type=str,
                              default='new_avatar.png',
                              help='Name of output file')
    group_create.add_argument('-r', '--randomise',
                              action='store_true',
                              help='Randomise rest of the items')
    args = parser.parse_args()

    if args.list:
        avail_conf = AvatarConfParser(configuration)
        if args.list == 'char':
            print avail_conf.list_available_chars()
        elif args.list == 'obj':
            print avail_conf.list_all_available_objs()
        elif args.list == 'cat':
            print avail_conf.list_available_categories()
        elif args.list == 'all':
            # Chars
            chars = avail_conf.list_available_chars()
            print chars
            for char in chars:
                prev = "Char: {} | Preview: {}".format(char, avail_conf.get_char_preview(char))
                print prev
            # Objs
            objs = avail_conf.list_all_available_objs()
            print objs
            for obj in objs:
                prev = "Item: {} | Preview: {}".format(obj, avail_conf.get_item_preview(obj))
                print prev
            # Categories
            cats = avail_conf.list_available_categories()
            print cats
            for cat in cats:
                icon_ac = "Cat: {} | Active Icon: {}".format(cat, avail_conf.get_active_category_icon(cat))
                icon_inac = "Cat: {} | Inactive Icon: {}".format(cat, avail_conf.get_inactive_category_icon(cat))
                print icon_ac
                print icon_inac
        return 0

    if args.create:
        avatar_creator = AvatarCreator(configuration)
        avatar_creator.char_select(args.create.pop(0))
        if args.environment:
            avatar_creator.env_select(args.environment)

        if not args.randomise:
            rc = avatar_creator.obj_select(args.create)
        else:
            rc = avatar_creator.randomise_rest(args.create)
        if not rc:
            logger.error('Error processing the list, please double check it')
            return 1
        avatar_creator.create_avatar(save_to=args.output, circ_assets=args.circular)


if __name__ == '__main__':
    sys.exit(main())
