#!/usr/bin/env python

# kano-profile-gui
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import os
import sys
from gi.repository import Gtk, Gdk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.gtk3.application_window import ApplicationWindow
from kano.gtk3.top_bar import TopBar
from kano.gtk3.heading import Heading

from kano_avatar.logic import AvatarCreator, get_avatar_conf
from kano.logging import logger
from kano_avatar_gui.Menu import Menu

try:
    from kano_profile.tracker import Tracker
    kanotracker = Tracker()
except:
    pass

configuration = get_avatar_conf()

avatar_cr = AvatarCreator(configuration)


class MainWindow(ApplicationWindow):
    _list_of_categories = []
    _list_of_comboxes = []
    _grid = None

    def __init__(self):
        ApplicationWindow.__init__(self, 'Avatar', 755, 588)

        # self.connect("show", self._app_loaded)
        self.connect("delete-event", Gtk.main_quit)

        # self.set_icon_from_file("/usr/share/kano-profile/icons/avatar.png")

        # Styling
        self._manage_styling()

        # Setup widgets
        self.set_decorated(True)
        self._top_bar = TopBar("Avatar", self._win_width, False)
        self._top_bar.set_close_callback(Gtk.main_quit)
        self.set_titlebar(self._top_bar)

        self._get_obj_data()
        # TODO Un hardcode the following
        avatar_cr.char_select('Judoka_Skin')

        self._grid = Gtk.Grid()
        # self._create_list_boxes()
        self._create_img_box(avatar_cr.selected_char_asset())
        self.title = Heading('Make your Avatar', 'Choose clothes and other swag')
        self._grid.attach(self.title.container, 0, 0, 9, 1)

        self._overlay.add(self._grid)
        self._attach_menu()

        self.show_all()

    def _attach_menu(self):
        self._menu = Menu(avatar_cr)
        self._menu.connect('asset_selected', self._update_img)
        self._grid.attach(self._menu, 0, 1, 1, 1)

    def _print_info(self, widget, info):
        print "widget = {}".format(widget)
        print "info = {}".format(info)
        print "\n"

    def _get_obj_data(self):
        self._list_of_categories = avatar_cr.list_available_categories()

    def _manage_styling(self):
        screen = Gdk.Screen.get_default()
        specific_css_provider = Gtk.CssProvider()
        # TODO remove hard-coded link
        specific_css_provider.load_from_path('/usr/share/kano-profile/media/CSS/style.css')
        specific_style_context = Gtk.StyleContext()
        specific_style_context.add_provider_for_screen(screen,
                                                       specific_css_provider,
                                                       Gtk.STYLE_PROVIDER_PRIORITY_USER)
        style = self.get_style_context()
        style.add_class('main_window')

    def _create_img_box(self, img_name):
        self._imgbox = ImageView(self)
        self._grid.attach(self._imgbox, 2, 1, 7, 7)

        self._imgbox.set_image(img_name)

    def _create_list_boxes(self):
        i = 1
        for cat in self._list_of_categories:
            cat_box = Gtk.ComboBoxText()
            cat_box.set_entry_text_column(0)

            for obj in avatar_cr.get_avail_objs(cat):
                cat_box.append_text(obj)
            cat_box.append_text('b')

            self._list_of_comboxes.append(cat_box)

            self._grid.attach(cat_box, 0, i, 1, 1)
            i += 1
            cat_box.connect('changed', self._update_img)

    '''
    def _update_img(self, combo):

        list_of_objs = []
        for box in self._list_of_comboxes:
            if box.get_active_text():
                list_of_objs.append(box.get_active_text())
        rc = avatar_cr.obj_select(list_of_objs)
        if not rc:
            logger.error('Error processing the list {}'.format(list_of_objs))
        else:
            avatar_cr.create_avatar(save_to='avatar.png')
            self._imgbox.set_image('avatar.png')

    '''
    def _update_img(self, widget, selected):
        list_of_objs = self._menu.get_all_selected_objs()
        rc = avatar_cr.obj_select(list_of_objs)
        if not rc:
            logger.error('Error processing the list {}'.format(list_of_objs))
        else:
            avatar_cr.create_avatar(save_to='avatar.png')
            self._imgbox.set_image('avatar.png')


class ImageView(Gtk.EventBox):
    _img = None

    def __init__(self, win):
        Gtk.EventBox.__init__(self, hexpand=True, vexpand=True)

        style = self.get_style_context()
        style.add_class('imageview')

        self._current = None
        self._win = win

        self.show()

    def get_window(self):
        return self._win

    def set_image(self, img_loc):
        if not self._img:
            self._img = Gtk.Image.new_from_file(img_loc)
            self.add(self._img)
            self._img.show()
        else:
            self._img.clear()
            self._img.set_from_file(img_loc)


def main():
    win = MainWindow()
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
