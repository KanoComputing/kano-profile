#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import os
import sys
import argparse
from sys import platform as _platform

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.world.functions import sync, login_using_token, backup_content, restore_content
from kano.utils import get_home, ensure_dir, run_cmd, read_json, delete_file, run_bg, \
    is_installed, is_gui
from kano.profile.paths import app_profiles_file

home_dir = get_home()

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--silent', action='store_true', help='silent mode')
parser.add_argument('-d', '--dialog', action='store_true', help='display dialog')
parser.add_argument('--sync', action='store_true', help='sync profile data')
parser.add_argument('--backup', action='store_true', help='backup app content')
parser.add_argument('--restore', action='store_true', help='restore app content')
args = parser.parse_args()

enable_dialog = args.dialog and is_gui() and is_installed('zenity')


def display_msg(msg):
    if enable_dialog:
        run_cmd('zenity --info --text "{}"'.format(msg))
    else:
        print msg


def do_login():
    # login first with token, if not working then try with dialog
    # do not show dialog if in silent mode
    login_success, value = login_using_token()
    if not login_success:
        if args.silent:
            sys.exit()
        else:
            run_cmd(dir_path + '/bin/kano-login')
            login_success, value = login_using_token()
            if not login_success:
                display_msg('Login not possible, error: ' + value)
                sys.exit(1)


def do_sync():
    success, value = sync()
    if not success:
        msg = 'Sync not possible, error: {}'.format(value)
        display_msg(msg)
        return

    refresh_kdesk()

    # msg = 'Sync OK'
    # display_msg(msg)


def do_backup():
    os.chdir(home_dir)

    folders = []
    app_profiles_data = read_json(app_profiles_file)
    for key, values in app_profiles_data.iteritems():
        if 'dir' in values:
            dir_path = values['dir']
            if os.path.exists(dir_path):
                folders.append(values['dir'])
    if not folders:
        return

    tmp_dir = '/tmp/kanoprofile'
    ensure_dir(tmp_dir)
    tmp_file = os.path.join(tmp_dir, 'backup.tar.gz')
    delete_file(tmp_file)

    tar_cmd = 'tar -czf {tmp_file} {folders} --exclude=webload'.format(tmp_file=tmp_file, folders=' '.join(folders))
    if _platform == 'darwin':
        tar_cmd = 'g' + tar_cmd

    _, e, _ = run_cmd(tar_cmd)
    if e:
        msg = 'Error with compressing backup data: {}'.format(e)
        display_msg(msg)
        return

    success, error = backup_content(tmp_file)
    if not success:
        msg = 'Error with uploading backup data: {}'.format(e)
        display_msg(msg)
        return

    delete_file(tmp_file)
    display_msg('Backup OK')


def do_restore():
    os.chdir(home_dir)

    tmp_dir = '/tmp/kanoprofile'
    ensure_dir(tmp_dir)
    tmp_file = os.path.join(tmp_dir, 'restore.tar.gz')
    delete_file(tmp_file)

    success, error = restore_content(tmp_file)
    if not success:
        print 'Error with downloading restore data: ' + error
        return

    if _platform == 'darwin':
        tar_cmd = 'gtar -xzf {tmp_file} --skip-old-files'.format(tmp_file=tmp_file)
    else:
        tar_cmd = 'tar -kxzf {tmp_file}'.format(tmp_file=tmp_file)

    _, e, _ = run_cmd(tar_cmd)
    if e:
        msg = 'Error with uncompressing restore data: {}'.format(e)
        display_msg(msg)

    if is_installed('kano-settings'):
        kano_setting_cmd = 'sudo kano-settings auto'
        run_bg(kano_setting_cmd)

    refresh_kdesk()
    delete_file(tmp_file)

    display_msg('Restore OK')


def refresh_kdesk():
    if os.path.exists('/usr/bin/kdesk'):
        run_bg('kdesk -a profile')


if __name__ == '__main__':
    if not (args.sync or args.backup or args.restore):
        parser.print_help()
        sys.exit()

    do_login()

    if args.sync:
        do_sync()

    if args.backup:
        do_backup()

    if args.restore:
        do_restore()
