#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# UI for share screen

from gi.repository import Gtk, Gdk
import os
import sys

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.network import is_internet
from kano.utils import read_json

from kano.profile.paths import app_profiles_file
from kano.world.share import list_shares, download_share
from kano.gtk3.top_bar import TopBar
from kano.gtk3.buttons import KanoButton
from kano.gtk3.kano_dialog import KanoDialog
from kano.gtk3.scrolled_window import ScrolledWindow
from kano.paths import common_css_dir
from kano.logging import logger


def make_share_list():
    row_height = 70

    grid = Gtk.Grid()
    grid.set_row_spacing(0)
    grid.set_size_request(400, 400)

    if len(sys.argv) == 2:
        if sys.argv[1] == '--list-all':
            filter_app = None
            featured = False
        else:
            filter_app = sys.argv[1]
            if filter_app not in read_json(app_profiles_file):
                sys.exit('Given app not in app profiles: {}'.format(filter_app))
            featured = False
    else:
        filter_app = None
        featured = True

    success, text, data = list_shares(app_name=filter_app, featured=featured)
    if not success:
        sys.exit('Error with listing shares, error: {}'.format(text))

    for i, entry in enumerate(data['entries']):
        row = Gtk.EventBox()
        grid.attach(row, 0, i, 1, 1)

        if i % 2:
            row.get_style_context().add_class('appgrid_grey')

        row_grid = Gtk.Grid()
        row.add(row_grid)

        has_url = bool(entry['attachment_url'])

        label = Gtk.Label(entry['app'])
        label.set_size_request(50, row_height)
        row_grid.attach(label, 0, 0, 1, 3)

        label = Gtk.Label(entry['title'])
        label.set_size_request(250, row_height)
        row_grid.attach(label, 1, 0, 1, 3)

        if has_url:
            button = KanoButton('DOWNLOAD')
            button.set_size_request(100, 30)
            button.connect('clicked', load_share, entry)
            row_grid.attach(button, 2, 1, 1, 1)

    align = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0)
    padding = 20
    align.set_padding(padding, padding, padding, padding)
    align.add(grid)

    return align


def load_share(_button, entry):
    success, data = download_share(entry)
    if not success:
        logger.error('Could not download share, error: {}'.format(data))

    (title, attachment_path) = data
    print 'File Path: {}'.format(attachment_path)

    sys.exit()


class MainWindow(Gtk.Window):

    def __init__(self):
        self.width = 580
        self.height = 550

        Gtk.Window.__init__(self, title='Kano Share')

        self.set_decorated(False)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_resizable(False)

        grid = Gtk.Grid()
        self.add(grid)

        top_bar = TopBar('Kano Share', self.width)
        top_bar.set_close_callback(Gtk.main_quit)
        grid.attach(top_bar, 0, 0, 1, 1)

        share_list = make_share_list()
        scrolledwindow = ScrolledWindow()
        scrolledwindow.set_hexpand(True)
        scrolledwindow.set_vexpand(True)
        scrolledwindow.add_with_viewport(share_list)
        scrolledwindow.set_size_request(self.width, self.height - top_bar.height)
        grid.attach(scrolledwindow, 0, 1, 1, 1)


def main():
    if not is_internet():
        kdialog = KanoDialog("You don't have internet!", "You need an internet connection to share")
        kdialog.run()
        sys.exit('No internet')

    # Create style sheet
    colourProvider = Gtk.CssProvider()
    colour_file = os.path.join(common_css_dir, 'colours.css')
    if not os.path.exists(colour_file):
        sys.exit('CSS file missing!')
    colourProvider.load_from_path(colour_file)
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(common_css_dir, 'common.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, colourProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
