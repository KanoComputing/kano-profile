#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# UI for login screen

from gi.repository import Gtk, Gdk, Pango
import os
import sys
from slugify import slugify

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.network import is_internet
from kano.utils import download_url, ensure_dir, read_json, get_home, write_json

from kano.profile.paths import app_profiles_file
from kano_profile_gui.paths import css_dir
from kano_profile_gui.components import icons
from kano.world.share import list_shares

DEBUG_MODE = False


class TopBar(Gtk.EventBox):
    _TOP_BAR_HEIGHT = 44

    def __init__(self, title):
        super(TopBar, self).__init__(hexpand=True, vexpand=True)

        self.get_style_context().add_class('top_bar_container')

        box = Gtk.Box()
        box.set_size_request(-1, self._TOP_BAR_HEIGHT)

        self._header = Gtk.Label(title, halign=Gtk.Align.CENTER,
                                 valign=Gtk.Align.CENTER,
                                 hexpand=True)
        box.pack_start(self._header, True, True, 0)

        self._header.modify_font(Pango.FontDescription('Bariol 13'))
        self._header.get_style_context().add_class('header')

        # Close button
        cross_icon = icons.get_ui_icon('cross')

        self._close_button = Gtk.Button()
        self._close_button.set_image(cross_icon)
        self._close_button.props.margin_right = 2
        self._close_button.set_can_focus(False)
        self._close_button.get_style_context().add_class('top_bar_button')
        self._close_button.get_style_context().add_class('no_border')

        self._close_button.connect('clicked', self._close_button_click)
        self._close_button.connect('enter-notify-event',
                                   self._close_button_mouse_enter)
        self._close_button.connect('leave-notify-event',
                                   self._close_button_mouse_leave)

        box.pack_start(self._close_button, False, False, 0)

        self.add(box)

    def _close_button_mouse_enter(self, button, event):
        # Change the cursor to hour Glass
        cursor = Gdk.Cursor.new(Gdk.CursorType.HAND1)
        self.get_root_window().set_cursor(cursor)

    def _close_button_mouse_leave(self, button, event):
        # Set the cursor to normal Arrow
        cursor = Gdk.Cursor.new(Gdk.CursorType.ARROW)
        self.get_root_window().set_cursor(cursor)

    def _close_button_click(self, event):
        cursor = Gdk.Cursor.new(Gdk.CursorType.ARROW)
        self.get_root_window().set_cursor(cursor)
        Gdk.flush()

        Gtk.main_quit()


def make_share_list():
    row_height = 60

    grid = Gtk.Grid()
    grid.set_row_spacing(0)
    grid.set_size_request(400, 400)

    if len(sys.argv) == 2:
        if sys.argv[1] == '--list-all':
            filter_app = None
            featured = False
        else:
            filter_app = sys.argv[1]
            if filter_app not in read_json(app_profiles_file):
                sys.exit('Given app not in app profiles: {}'.format(filter_app))
            featured = False
    else:
        filter_app = None
        featured = True

    success, text, data = list_shares(app_name=filter_app, featured=featured)
    if not success:
        sys.exit('Error with listing shares, error: {}'.format(text))

    for i, entry in enumerate(data['entries']):
        row = Gtk.EventBox()
        grid.attach(row, 0, i, 1, 1)

        if i % 2:
            row.get_style_context().add_class('downloadgrid_grey')

        row_grid = Gtk.Grid()
        row.add(row_grid)

        has_url = bool(entry['attachment_url'])

        label = Gtk.Label(entry['app'])
        label.set_size_request(50, row_height)
        row_grid.attach(label, 0, 0, 1, 3)

        label = Gtk.Label(entry['title'])
        label.set_size_request(250, row_height)
        row_grid.attach(label, 1, 0, 1, 3)

        if has_url:
            button = Gtk.Button('Download')
            button.set_size_request(100, 30)
            button.connect('clicked', load_share, entry)
            row_grid.attach(button, 2, 1, 1, 1)

    align = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0)
    padding = 20
    align.set_padding(padding, padding, padding, padding)
    align.add(grid)

    return align


def load_share(_button, entry):
    app = entry['app']
    title = entry['title']
    attachment_url = entry['attachment_url']

    data = {
        'title': title,
        'description': entry['description']
    }

    app_profiles = read_json(app_profiles_file)

    if app not in app_profiles:
        if DEBUG_MODE:
            print 'Cannot load, app not found in profiles'
        return
    app_profile = app_profiles[app]

    folder = os.path.join(get_home(), app_profile['dir'], 'webload')
    ensure_dir(folder)

    title_slugified = slugify(title)

    attachment_ext = attachment_url.split('.')[-1]
    attachment_name = '{}.{}'.format(title_slugified, attachment_ext)
    attachment_path = os.path.join(folder, attachment_name)

    json_name = '{}.{}'.format(title_slugified, 'json')
    json_path = os.path.join(folder, json_name)

    success, text = download_url(attachment_url, attachment_path)
    if not success:
        if DEBUG_MODE:
            print 'Error with downloading share file: {}'.format(text)
    else:
        write_json(json_path, data)
        print 'File Path: {}'.format(attachment_path)
        sys.exit()


class MainWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title='Kano Share')

        self.set_decorated(False)
        self.set_position(Gtk.WindowPosition.CENTER)

        grid = Gtk.Grid()
        self.add(grid)

        top_bar = TopBar('Kano Share')
        grid.attach(top_bar, 0, 0, 1, 1)

        share_list = make_share_list()
        grid.attach(share_list, 0, 1, 1, 1)


def main():
    if not is_internet():
        sys.exit('No internet')

    # Create style sheet
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(css_dir, 'share.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
