#!/usr/bin/env python

# kano-profile-cli
#
# Copyright (C) 2014, 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import os
import sys
if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_profile.apps import get_app_data_dir, load_app_state_variable
from kano_profile.profile import load_profile, get_avatar, get_environment, \
    get_avatar_circ_image_path, recreate_char
from kano_profile.badges import save_app_state_variable_with_dialog, calculate_xp, \
    calculate_kano_level, increment_app_state_variable_with_dialog, \
    save_app_state_variable_all_users
from kano_world.functions import is_registered, get_mixed_username, has_token
from kano_profile.quests import Quests
from kano.utils import is_number

variable_not_found_str = "VARIABLE_NOT_FOUND"


def check_arg_len(number):
    if len(sys.argv) != number + 1:
        print 'Command entered was {}'.format(sys.argv)
        sys.exit("Wrong usage, need {} arguments".format(number))


if __name__ != '__main__':
    sys.exit("This is a script, do not import it as a module!")

if len(sys.argv) == 1:
    help = 'Wrong usage, needs an argument\n'
    help += 'Possible uses: get_app_data_dir, load_app_state_variable, save_app_state_variable\n'
    help += 'save_app_state_variable_get_xp_diff, increment_app_state_variable\n'
    help += 'is_registered, get_stats, get_email, get_notifications,\n'
    help += 'get_notifications_count, increment_app_runtime, get_world_info\n'
    help += 'fulfilled_quests_count, trigger_quests_event'
    sys.exit(help)

if sys.argv[1] == 'get_app_data_dir':
    check_arg_len(2)
    app_name = sys.argv[2]
    sys.stdout.write(get_app_data_dir(app_name))

elif sys.argv[1] == 'load_app_state_variable':
    check_arg_len(3)
    app_name = sys.argv[2]
    variable = sys.argv[3]
    value = load_app_state_variable(app_name, variable)
    if value:
        sys.stdout.write(str(value))
    else:
        sys.stdout.write(variable_not_found_str)

elif sys.argv[1] == 'save_app_state_variable':
    check_arg_len(4)
    app_name = sys.argv[2]
    variable = sys.argv[3]
    value = sys.argv[4]
    if value.isdigit():
        value = int(value)
    elif is_number(value):
        value = float(value)
    save_app_state_variable_with_dialog(app_name, variable, value)

elif sys.argv[1] == 'save_app_state_variable_get_xp_diff':
    check_arg_len(4)
    app_name = sys.argv[2]
    variable = sys.argv[3]
    value = sys.argv[4]
    if value.isdigit():
        value = int(value)
    elif is_number(value):
        value = float(value)
    old_xp = calculate_xp()
    save_app_state_variable_with_dialog(app_name, variable, value)
    new_xp = calculate_xp()
    sys.stdout.write(str(new_xp - old_xp))

elif sys.argv[1] == 'save_app_state_variable_all_users':
    check_arg_len(4)
    app_name = sys.argv[2]
    variable = sys.argv[3]
    value = sys.argv[4]
    if value.isdigit():
        value = int(value)
    elif is_number(value):
        value = float(value)
    save_app_state_variable_all_users(app_name, variable, value)

elif sys.argv[1] == 'increment_app_state_variable':
    check_arg_len(4)
    app_name = sys.argv[2]
    variable = sys.argv[3]
    value = sys.argv[4]
    if value.isdigit():
        value = int(value)
    elif is_number(value):
        value = float(value)
    increment_app_state_variable_with_dialog(app_name, variable, value)

elif sys.argv[1] == 'is_registered':
    check_arg_len(1)
    print int(is_registered())
    sys.exit(int(is_registered()))

elif sys.argv[1] == 'get_stats':
    check_arg_len(1)

    print 'mixed_username: {}'.format(get_mixed_username())

    print 'is_registered: {}'.format(int(is_registered()))
    print 'has_token: {}'.format(int(has_token()))

    print 'xp: {}'.format(calculate_xp())

    level, progress, _ = calculate_kano_level()
    progress = int(progress * 100)
    print 'level: {}'.format(level)
    print 'progress: {}'.format(progress)

    avatar_cat, avatar_item = get_avatar()
    environment = get_environment()
    print 'avatar: {} {}'.format(avatar_cat, avatar_item)
    print 'environment: {}'.format(environment)

    avatar_image_path = get_avatar_circ_image_path()
    if not os.path.exists(avatar_image_path):
        recreate_char(block=True)
        avatar_image_path = get_avatar_circ_image_path()
    # If it still doesn't exist leave it empty
    if not os.path.exists(avatar_image_path):
        avatar_image_path = 'image_missing'
    print 'avatar_image_path: {}'.format(avatar_image_path)

    progress_value = progress / 5
    progress_image_path = os.path.join('/usr/share/kano-profile/media/images/progress_icons/209x80/',
                                       '{}.png'.format(progress_value))
    if not os.path.exists(progress_image_path):
        progress_image_path = 'image_missing'
    print 'progress_image_path: {}'.format(progress_image_path)

elif sys.argv[1] == 'get_email':
    check_arg_len(1)
    try:
        email = load_profile()['email']
        print email
    except Exception:
        print 'Email not found'
        sys.exit(1)

elif sys.argv[1] == 'get_notifications':
    check_arg_len(1)
    try:
        unread_notifications = load_profile()['notifications']
        print 'notifications: {}'.format(unread_notifications)
    except Exception:
        print 'notifications not found'
        sys.exit(1)

elif sys.argv[1] == 'get_notifications_count':
    check_arg_len(1)
    try:
        total_unread = len(load_profile()['notifications'])
        print 'notifications_count: {}'.format(total_unread)
    except Exception:
        print 'notifications_count not found'
        sys.exit(1)

elif sys.argv[1] == 'increment_app_runtime':
    from kano_profile.tracker import add_runtime_to_app

    check_arg_len(3)
    app = sys.argv[2]
    runtime = sys.argv[3]

    if not is_number(runtime):
        sys.exit('3rd argument is not a number')

    add_runtime_to_app(app, runtime)

elif sys.argv[1] == 'get_world_info':
    # Returns: is_registered
    # Prints: notifications count and stats activity
    from kano_world.functions import get_stats_activity

    check_arg_len(1)
    # Notifications
    try:
        unread_notifications = load_profile()['notifications']
        print 'notifications: {}'.format(unread_notifications)
    except Exception:
        print 'notifications not found'
    # Stats activity
    success, data = get_stats_activity()
    if success:
        print "total_users: {}".format(data['total_users'])
        print "total_shares: {}".format(data['total_shares'])
        print "total_comments: {}".format(data['total_comments'])
        print "total_likes: {}".format(data['total_likes'])
        print "total_active_today: {}".format(data['total_active_today'])
        print "total_lines_of_code: {}".format(data['total_lines_of_code'])
        print "total_blocks_created: {}".format(data['total_blocks_created'])
        print "total_number_of_apples: {}".format(data['total_number_of_apples'])
    sys.exit(int(is_registered()))

elif sys.argv[1] == 'fulfilled_quests_count':
    check_arg_len(1)

    qm = Quests()
    print len([q for q in qm.list_active_quests() if q.is_fulfilled()])

elif sys.argv[1] == 'trigger_quests_event':
    check_arg_len(2)

    event_name = sys.argv[2]
    qm = Quests()
    qm.trigger_event(event_name)
else:
    sys.exit("wrong usage")
