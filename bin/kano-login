#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# UI for login screen

from gi.repository import Gtk, Gdk
import os
import sys

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_profile_gui.paths import css_dir
from kano_login import login, first_screen, gender, birthday, register, account_confirm
from kano_login.components import top_bar, logged_in
#from kano.world.functions import is_registered
from kano.world.functions import login_using_token


refs = {
    0: [login, first_screen],
    1: gender,
    2: birthday,
    3: register,
    4: account_confirm,
}

MAX_LEVEL = 4


class MainWindow(Gtk.Window):

    def __init__(self, first_boot):

        # Create main window
        Gtk.Window.__init__(self, title='Kano Login')
        self.WINDOW_HEIGHT = 380
        self.WINDOW_WIDTH = 500

        self.last_level_visited = 0

        self.username = ""
        self.email = ""
        self.password = ""
        self.birthday = ""
        self.age = 0
        self.gender = ""
        self.first_boot = first_boot

        # The state is the current window showing
        self.state = 0

        self.grid = Gtk.Grid()
        self.add(self.grid)

        self.set_size_request(self.WINDOW_WIDTH, self.WINDOW_HEIGHT)

        # Remove decoration
        self.set_decorated(False)
        self.set_resizable(False)
        self.set_position(Gtk.WindowPosition.CENTER)

        # Dynamic box
        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)

        self.top_bar = top_bar.Top_bar(self.WINDOW_WIDTH)

        self.grid.attach(self.top_bar.background, 0, 0, 3, 1)
        self.grid.attach(self.box, 1, 1, 1, 1)

        self.top_bar.set_prev_callback(self.on_prev)
        self.top_bar.set_next_callback(self.on_next)

        if first_boot == 1:
            self.unpack_grid()
            first_screen.activate(self)
        else:
            self.clear_box()
            login.activate(self, self.box)

        self.show_all()

    def enable_prev(self):
        self.top_bar.enable_prev()

    def enable_next(self):
        self.top_bar.enable_next()

    def disable_prev(self):
        self.top_bar.disable_prev()

    def disable_next(self):
        self.top_bar.disable_next()

    # Updates the state of the window on clicking the update button
    # e.g. whether the prev and next buttons are enabled or disabled
    def update(self):
        self.enable_prev()
        self.disable_next()
        self.state = self.state + 1

    def on_prev(self, arg1=None, arg2=None):
        self.clear_box()
        self.state = self.state - 1
        module = refs[self.state]
        if self.state == 0:
            if self.first_boot == 1:
                self.unpack_grid()
            module = refs[self.state][self.first_boot]
            # Doesn't make sense to disable prev button anymore
        self.goto(module)

    def on_next(self, arg1=None, arg2=None):
        self.state = self.state + 1
        module = refs[self.state]
        self.top_bar.enable_prev()
        if self.state == MAX_LEVEL:
            self.top_bar.disable_next()
        self.goto(module)

    def goto(self, module):
        self.clear_box()
        module.activate(self, self.box)

    def clear_box(self):
        for i in self.box.get_children():
            self.box.remove(i)

    def unpack_grid(self):
        self.remove(self.grid)

    def pack_grid(self):
        self.add(self.grid)


def main():
    # Create style sheet
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(css_dir, 'login.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)
    success, _ = login_using_token()

    if success:
        win = logged_in.LoggedIn()
        win.show_all()
        Gtk.main()

    else:
        first_boot = 0
        if len(sys.argv) == 2 and sys.argv[1] == 'first_boot':
            first_boot = 1
        win = MainWindow(first_boot)
        win.connect('delete-event', Gtk.main_quit)
        win.show_all()
        Gtk.main()


if __name__ == '__main__':
    main()
