#!/usr/bin/env python

import argparse
import yaml
from PIL import Image

CONF_FILE = 'sample_conf.yaml'


class AvatarAccessory():
    _category = None
    _name = ''
    _asset_fname = ''
    _img_position_x = 0
    _img_position_y = 0

    _img = None

    def __init__(self, name, category, file_name, x, y):
        self._category = category
        self._name = name
        self._img_position_x = x
        self._img_position_y = y
        self._asset_fname = file_name

    def _acceptable_category_name(self, cat_name):
        if cat_name not in categories:
            raise ValueError('category {} doesn\'t match available categories')
        else:
            return cat_name

    def name(self):
        return self._name

    def category(self):
        return self._category

    def get_fname(self):
        return self._asset_fname

    def load_image(self):
        self._img = Image.open(self.get_fname())

    def paste_over_image(self, img):
        if self._img is None:
            self.load_image()
        # position of upper left corner
        position = (self._img_position_x, self._img_position_y)
        img.paste(self._img, position, self._img)


class AvatarCharacter():
    _name = ''
    _asset_fname = ''
    _img = None

    def __init__(self, name, file_name):
        self._name = name
        self._asset_fname = file_name

    def load_image(self):
        self._img = Image.open(self._asset_fname)

    def get_img(self):
        return self._img


class AvatarConfParser():
    _categories = set()
    _levels = set()
    _cat_to_lvl = {}
    _level_to_categories = {}
    _objects = {}
    _characters = {}
    cat_lvl_label = 'category_levels'
    objects_label = 'objects'
    char_label = 'characters'

    def __init__(self, conf_data):
        if self.cat_lvl_label not in conf_data:
            print 'Error, {} dictionary not found'.format(self.cat_lvl_label)
        else:
            self._populate_category_structures(conf_data)

        if self.char_label not in conf_data:
            print 'Error, {} dictionary not found'.format(self.char_label)
        else:
            self._populate_character_structures(conf_data)

        if self.objects_label not in conf_data:
            print 'Error, {} dictionary not found'.format(self.objects_label)
        else:
            self._populate_object_structures(conf_data)

    def _populate_category_structures(self, conf_data):
        # First convert the category name into lowercase
        for cat, lvl in conf_data[self.cat_lvl_label].items():
            self._cat_to_lvl[cat.lower()] = lvl

        # Save both the unique set of levels and categories
        self._categories = set(self._cat_to_lvl.keys())
        self._levels = set(self._cat_to_lvl.values())

        self._level_to_categories = {i: [] for i in self._levels}
        for cat_name, lvl in self._cat_to_lvl.items():
            self._level_to_categories[lvl].append(cat_name)

    def _populate_object_structures(self, conf_data):
        for obj in conf_data[self.objects_label]:
            new_name = obj['display_name']
            new_cat = obj['category']
            new_fname = obj['img_name']
            new_x = obj['position_x']
            new_y = obj['position_y']
            new_obj = AvatarAccessory(new_name, new_cat, new_fname, new_x, new_y)
            self._objects[new_name] = new_obj

    def _populate_character_structures(self, conf_data):
        for obj in conf_data[self.char_label]:
            new_name = obj['display_name']
            new_fname = obj['img_name']
            new_obj = AvatarCharacter(new_name, new_fname)
            self._characters[new_name] = new_obj

program_desc = "This program handles the creation of an avatar for a user of Kano World"

configuration = None

with open(CONF_FILE) as f:
    configuration = yaml.load(f)

if configuration is None:
    print 'Error configuration was not loaded, check configuration file {}'.format(CONF_FILE)
    exit()


def main():
    parser = argparse.ArgumentParser(description=program_desc)
    group_view = parser.add_argument_group('View', 'View available choices')
    group_view.add_argument('-l', '--list',
                            choices=['char', 'obj', 'all'],
                            help='List available choices for characters (char),objects (obj), or all (all).')
    group_create = parser.add_argument_group('Create', 'Create a new avatar')
    group_create.add_argument('-c', '--create',
                              type=str,
                              nargs='+',
                              help='Create a new character, specify the character name followed by the objects')
    args = parser.parse_args()

    avail_conf = AvatarConfParser(configuration)

    if args.list:
        if args.list == 'char':
            print avail_conf._characters
        elif args.list == 'obj':
            print avail_conf._objects
        elif args.list == 'all':
            print avail_conf._characters
            print avail_conf._objects


if __name__ == '__main__':
    main()
