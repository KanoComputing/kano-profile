#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

## TEST COMMAND
# ./kano-profile-levelup level:5 badges:application:bug_buster environments:all:minecraft avatars:judoka:judoka_1 avatars:judoka:judoka_2

import os
import sys
if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.profile.badges import load_badge_rules
from gi.repository import Gtk, Gdk
from kano_profile_gui.images import get_image
from kano_profile_gui.paths import css_dir
import kano_profile_gui.components.cursor as cursor

all_rules = load_badge_rules()
categories = ['badges', 'avatars', 'environments']

DEBUG_MODE = False


class MainWindow(Gtk.Window):
    def __init__(self, new_level, new_items):
        Gtk.Window.__init__(self, title='Kano-Success')

        self.image_width = 590
        self.image_height = 270
        self.window_height = 440
        self.set_size_request(self.image_width, self.window_height)
        self.set_decorated(False)
        self.set_resizable(False)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.state = 0
        self.new_items = new_items
        self.category = None

        minecraft_running = os.system("pidof minecraft-pi")
        if minecraft_running == 0:
            # lxde-rc.xml changes positioning of window on the basis of the class name
            self.set_wmclass('kano-levelup-minecraft', 'Kano-levelup-minecraft')

        # Header
        self.title = Gtk.Label("Level Up!")
        self.title.get_style_context().add_class("alert_title")
        self.description = Gtk.Label("")
        self.description.get_style_context().add_class("alert_description")

        self.label_container = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=2)
        self.label_container.pack_start(self.title, False, False, 0)
        self.label_container.pack_start(self.description, False, False, 0)

        # Button
        self.button = Gtk.Button("GOT IT")
        self.button.get_style_context().add_class("green_button")
        self.button_box = Gtk.Box()
        self.button_box.add(self.button)
        self.button_alignment = Gtk.Alignment(xscale=1, yscale=1, xalign=0.5, yalign=0.5)
        self.button_alignment.set_padding(0, 0, (self.image_width / 2) - 40, 0)
        self.button_alignment.add(self.button_box)
        self.button.connect("clicked", self.go_to_next)
        cursor.attach_cursor_events(self.button)

        self.image = Gtk.Image()

        self.background = Gtk.EventBox()
        self.background.set_size_request(self.image_width, self.image_height)
        self.background.add(self.image)

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.box.pack_start(self.background, False, False, 0)
        self.box.pack_start(self.label_container, False, False, 20)
        self.box.pack_start(self.button_alignment, False, False, 0)

        self.add(self.box)

        if new_level:
            # Get image, title and label for new level
            self.set_description("new_level", str(new_level))
            # TODO: Change temporary filename for level up
            filename = get_image("level", "", "Level-" + str(new_level), str(self.image_width) + 'x' + str(self.image_height))
            self.image.set_from_file(filename)
        else:
            self.go_to_next()

    def go_to_next(self, event=None):

        self.go_to_next_category()

        items = None
        item = None
        subcat = None

        size_folder = str(self.image_width) + 'x' + str(self.image_height)
        filename = ""
        title = ""
        background_color = Gdk.RGBA()

        if self.category in self.new_items:
            for subcat, items in self.new_items[self.category].iteritems():
                for item, rules in items.iteritems():
                    color_string = '#' + rules["bg_color"]
                    background_color.parse(color_string)
                    if self.category == "environments":
                        title = rules["title"]
                        filename = get_image(self.category, subcat, item, size_folder)
                    elif self.category == "avatars":
                        title = subcat.replace('_', ' ').title()
                        continue
                    else:
                        title = rules["title"]
                        filename = get_image(self.category, subcat, item + "_levelup", size_folder)

        else:
            self.go_to_next_category()
            self.go_to_next()
            return

        self.background.override_background_color(Gtk.StateFlags.NORMAL, background_color)

        if self.category == "avatars":
            filename = get_image(self.category, subcat, subcat + "_levelup", size_folder)

        self.image.set_from_file(filename)
        self.set_description(self.category, title)

        if self.category == "avatars":
            del self.new_items["avatars"][subcat]
        else:
            # So we don't iterate through an empty dictionary on the next loop
            del items[item]
            if self.new_items[self.category][subcat] == {}:
                del self.new_items[self.category][subcat]

    def set_description(self, category, text):
        # New level
        if category == "new_level":
            self.title.set_text("Level Up!")
            self.description.set_text("You made it to Level " + text + "! Congrats, you hero – time for new swag")
        # New avatar
        elif self.category == "avatars":
            self.title.set_text("New Avatar!")
            self.description.set_text("You’ve unlocked a new friend to play as " + text + "! Change your face in your Profile")
        # New environment
        elif self.category == "environments":
            self.title.set_text("New Background!")
            self.description.set_text("You’ve unlocked " + text + " – change your background in your Profile")
        # New badges
        elif self.category == "badges":
            self.title.set_text("New Badge!")
            self.description.set_text("You’ve unlocked " + text + " – check out all your swag in your Profile")
        else:
            self.title.set_text("Congratulations!")
            self.description.set_text("You've unlocked " + text)

    def next_category(self):
        index = categories.index(self.category)

        while True:
            index = index + 1
            if index >= len(categories):
                Gtk.main_quit()
                exit()

            if categories[index] in self.new_items:
                self.category = categories[index]
                return

    def go_to_next_category(self):
        if self.category is None:
            for i in categories:
                if i in self.new_items:
                    self.category = i
                    return

        # We need this for avatars
        if self.new_items[self.category] == {}:
            self.next_category()

        #index = 0
        for i, j in self.new_items[self.category].iteritems():
            if i == {} or j == {}:
                self.next_category()
                return


def parse_items(args):
    new_level = None
    new_items = dict()

    for arg in args:
        split = arg.split(':')
        if split[0] == 'level':
            new_level = int(split[1])
        elif split[0] in ['badges', 'avatars', 'environments']:
            category, subcat, item = split
            try:
                new_items.setdefault(category, dict()).setdefault(subcat, dict())[item] \
                    = all_rules[category][subcat][item]
            except Exception:
                if DEBUG_MODE:
                    print 'item not found: {} {} {}'.format(category, subcat, item)
    return new_level, new_items


def main():
    # os.system("/usr/bin/kdesk -b")

    new_level, new_items = parse_items(sys.argv[1:])

    # Create style sheet
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(css_dir, 'login.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    win = MainWindow(new_level, new_items)
    win.connect('delete-event', close_window)
    win.show_all()

    Gtk.main()


def close_window(widget=None, event=None):
    # os.system("/usr/bin/kdesk -b")
    Gtk.main_quit()


if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit('Nothing to display!')
    main()
