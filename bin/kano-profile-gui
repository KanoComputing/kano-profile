#!/usr/bin/env python

# kano-profile-gui
#
# Copyright (C) 2014, 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import os
import sys
from gi.repository import Gtk

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_profile_gui.character_screens import CharacterDisplay
from kano_profile_gui.badge_screen import BadgeScreen
from kano_profile_gui.paths import media_dir
from kano_profile_gui import projects

from kano.gtk3.apply_styles import apply_colours_to_screen, apply_styling_to_screen
from kano.gtk3.application_window import ApplicationWindow
from kano_profile_gui.MenuBar import MenuBar

from kano_avatar_gui.CharacterCreator import CharacterCreator


class MainWindow(ApplicationWindow):

    def __init__(self):
        self.height = 596
        self.width = 734
        ApplicationWindow.__init__(self, 'Kano Profile', self.width,
                                   self.height)

        # Apply styling to screen
        apply_colours_to_screen()
        self.css_path = os.path.join(media_dir, "CSS/kano_profile_gui.css")
        apply_styling_to_screen(self.css_path)

        # Initialise the character creator
        self.char_creator = CharacterCreator(randomise=True)
        self._vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_main_widget(self._vbox)

        # Remove decoration
        self.set_decorated(False)
        self.set_resizable(False)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_icon_name("kano-world")

        self._main_content = Gtk.EventBox()

        self._menu_bar = MenuBar(self.width)
        self._menu_bar.connect('home-button-clicked', self.go_to_category)
        self._menu_bar.connect('menu-button-clicked', self.go_to_category)

        # style white
        self._bottom_bar = Gtk.EventBox()
        self._bottom_bar.set_size_request(-1, 70)

        self._vbox.pack_start(self._menu_bar, False, False, 0)
        self._vbox.pack_start(self._main_content, False, False, 0)
        self._vbox.pack_end(self._bottom_bar, False, False, 0)

        # init home screen
        self.go_to_category(self._menu_bar.home_button, 'CHARACTER')
        self.show_all()

    def pack_in_main_content(self, widget):
        self._main_content.add(widget)

    def empty_main_content(self):
        for child in self._main_content.get_children():
            self._main_content.remove(child)

    def pack_in_bottom_bar(self, widget):
        self._bottom_bar.add(widget)

    def empty_bottom_bar(self):
        for child in self._bottom_bar.get_children():
            self._bottom_bar.remove(child)

    def go_to_category(self, button, page):

        refs = {
            'CHARACTER': CharacterDisplay,
            'BADGES': BadgeScreen,
            'SAVES': projects,
        }

        module = refs[page]
        self.empty_main_content()
        self.empty_bottom_bar()

        if page == "SAVES":
            module.activate(self)
        else:
            module(self)


def main():

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
