#!/usr/bin/env python

# kano-character-cli
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPLv2
#
# Program that generates character assets to be used with a Kano World profile


"""Character generator CLI
This program handles the Character creation for Kano World users

Usage:
    kano-character-cli -l (char|env)
    kano-character-cli -l (obj|cat) <character_id>
    kano-character-cli -c <selection>... (-s|-o <out_dir>)
    kano-character-cli -g
    kano-character-cli -h

Options:
    -h --help      Show this screen
    -l --list      List available choices for characters (char),objects (obj),
                   categories(cat) or all (all)
    -c --create    Create a new character, specify the character name followed
                   by the objects
    -o --output    Specify output directory [default: new_character.png].
    -s --sync      Sync with local and remote profile
    -g --generate  Generate the character from values saved in the local
                   profile
"""

import sys
import os
import docopt

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_avatar.logic import AvatarCreator, get_avatar_conf
from kano_avatar.conf_parser import AvatarConfParser
from kano_avatar.paths import AVATAR_DEFAULT_LOC, AVATAR_DEFAULT_NAME
from kano.logging import logger

configuration = get_avatar_conf()

if configuration is None:
    logger.error('Configuration was not loaded, check configuration file')
    sys.exit(1)


def main(args):

    if args['--list']:
        avail_conf = AvatarConfParser(configuration)
        if args['char']:
            print avail_conf.list_available_chars()
        elif args['obj']:
            cats = avail_conf.list_available_categories(args['<character_id>'])
            for cat in cats:
                print 'Cat {}'.format(cat)
                print avail_conf.get_avail_objs(args['<character_id>'], cat)
        elif args['cat']:
            print avail_conf.list_available_categories(args['<character_id>'])
        return 0
    elif args['--create']:
        char_creator = AvatarCreator(configuration)
        char_creator.char_select(args['<selection>'].pop(0))

        # if not args.randomise:
        #    rc = char_creator.obj_select(args.create)
        # else:
        rc = char_creator.randomise_rest(args['<selection>'])
        if not rc:
            logger.error('Error processing the list, please double check it')
            return 1

        if args['--sync']:
            out_path = os.path.join(AVATAR_DEFAULT_LOC, AVATAR_DEFAULT_NAME)
        else:
            out_path = args.output

        rc = char_creator.save_final_assets(out_path, sync=args['--sync'])

        if not rc:
            logger.error("Couldn't generate assets")
            return 2
        return 0
    elif args['--generate']:
        from kano_profile.profile import get_avatar, get_environment

        char, items = get_avatar(sync=False)
        env = get_environment()

        char_creator = AvatarCreator(configuration)

        char_creator.char_select(char)
        char_creator.obj_select(items.values())
        char_creator.env_select(env)

        path = os.path.join(AVATAR_DEFAULT_LOC, AVATAR_DEFAULT_NAME)

        rc = char_creator.save_final_assets(path, sync=False)
        if not rc:
            logger.error("Couldn't generate assets")
            return 2
        return 0


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    sys.exit(main(args))
