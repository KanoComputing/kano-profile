#!/usr/bin/env python

# kano-share
#
# Copyright (C) 2014, 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# UI for share screen

from gi.repository import Gtk
import os
import sys
import subprocess

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if DIR_PATH != '/usr':
        sys.path.insert(1, DIR_PATH)
        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

import kano_i18n.init
kano_i18n.init.install('kano-tutorial', LOCALE_PATH)

from kano.network import is_internet
from kano.utils import read_json

from kano_profile.paths import app_profiles_file
from kano_profile.badges import increment_app_state_variable_with_dialog
from kano_world.share import list_shares, download_share, \
    upload_share
from kano_world.functions import login_using_token
from kano.gtk3.top_bar import TopBar
from kano.gtk3.buttons import KanoButton
from kano.gtk3.kano_dialog import KanoDialog
from kano.gtk3.scrolled_window import ScrolledWindow
from kano.gtk3.apply_styles import apply_common_to_screen
from kano.gtk3.application_window import ApplicationWindow
from kano.logging import logger
from kano.gtk3.apply_styles import apply_styling_to_screen
from kano_profile_gui.paths import css_dir


def make_share_list():
    row_height = 70

    grid = Gtk.Grid()
    grid.set_size_request(400, 400)

    if len(sys.argv) == 2:
        if sys.argv[1] == '--list-all':
            filter_app = None
            featured = False
        else:
            filter_app = sys.argv[1]
            if filter_app not in read_json(app_profiles_file):
                sys.exit(
                    'Given app not in app profiles: {}'.format(filter_app))
            featured = False
    else:
        filter_app = None
        featured = True

    success, text, data = list_shares(app_name=filter_app, featured=featured)
    if not success:
        sys.exit('Error with listing shares, error: {}'.format(text))

    for i, entry in enumerate(data['entries']):
        # Backgrounds of the three components in the row
        background1 = Gtk.EventBox()
        background2 = Gtk.EventBox()
        background3 = Gtk.EventBox()

        if i % 2:
            background1.get_style_context().add_class('appgrid_grey')
            background2.get_style_context().add_class('appgrid_grey')
            background3.get_style_context().add_class('appgrid_grey')
        else:
            background1.get_style_context().add_class('white')
            background2.get_style_context().add_class('white')
            background3.get_style_context().add_class('white')

        grid.attach(background1, 0, i, 1, 1)
        grid.attach(background2, 1, i, 1, 1)
        grid.attach(background3, 2, i, 1, 1)

        label = Gtk.Label(entry['app'])
        label.set_size_request(50, row_height)
        label.get_style_context().add_class("menu_text")
        label.set_alignment(0, 0.5)
        label.set_margin_left(20)
        background1.add(label)

        label = Gtk.Label(entry['title'])
        label.set_size_request(250, row_height)
        label.get_style_context().add_class("menu_text")
        label.set_alignment(0, 0.5)
        label.set_margin_left(20)
        background2.add(label)

        has_url = bool(entry['attachment_url'])

        if has_url:
            button = KanoButton(_('Download').upper())
            button.set_size_request(100, 30)
            button.set_margin_top(15)
            button.set_margin_bottom(15)
            button.set_margin_left(20)
            button.set_margin_right(20)
            button.connect('clicked', load_share, entry)
            background3.add(button)

    align = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0)
    padding = 20
    align.set_padding(padding, padding, padding, padding)
    align.add(grid)

    return align


def load_share(button, entry):
    success, data = download_share(entry)
    if not success:
        logger.error('Could not download share, error: {}'.format(data))
        window = button.get_toplevel()
        confirm = KanoDialog(
            _('Oops! Can\'t download.'),
            _('Are you sure you\'re connected to the Internet?'),
            {
                _('Open WiFi').upper(): {
                    'return_value': True
                }
            },
            parent_window=window
        )
        confirm.run()
        subprocess.Popen(['sudo', 'kano-settings', '12'])

    else:
        (title, attachment_path, app, attachment_name, folder) = data
        print 'File Path: {}'.format(attachment_path)

        sys.exit()


class MainWindow(ApplicationWindow):

    def __init__(self):
        self.width = 580
        self.height = 550

        ApplicationWindow.__init__(
            self, title='Share', width=self.width, height=self.height)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_resizable(False)
        self.set_decorated(True)
        apply_styling_to_screen(os.path.join(css_dir, "share.css"))

        top_bar = TopBar('Kano Share', self.width)
        top_bar.set_close_callback(Gtk.main_quit)
        self.set_titlebar(top_bar)

        share_list = make_share_list()
        ScrolledWindow.apply_styling_to_screen(wide=True)
        scrolledwindow = ScrolledWindow()
        scrolledwindow.set_hexpand(False)
        scrolledwindow.set_vexpand(True)
        scrolledwindow.set_policy(
            Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        scrolledwindow.add_with_viewport(share_list)
        scrolledwindow.set_size_request(
            self.width, self.height - top_bar.height)
        self.set_main_widget(scrolledwindow)
        self.show_all()


def main():
    if not is_internet():
        kdialog = KanoDialog(
            "You don't have internet!",
            "You need an internet connection use Kano Share")
        kdialog.run()
        sys.exit('No internet')

    if len(sys.argv) > 1 and \
            sys.argv[1] == 'upload':

        upload()
    else:
        show_shares()


def upload():
    if len(sys.argv) != 5:
        print 'Incorrect arguments'
        print 'Correct usage: kano-share upload <app_name> <title> <dir_path>'
        exit(2)
    # Check for login
    success, _ = login_using_token()
    if not success:
        os.system('kano-login')
        success, _ = login_using_token()
        if not success:
            kdialog = KanoDialog('Failed to log in!')
            kdialog.run()

            error = 'Failed to login.'
            logger.error(error)
            exit(error)

    app_name = sys.argv[2]
    title = sys.argv[3]
    filepath = sys.argv[4]
    success, msg = upload_share(filepath, title, app_name)

    if not success:
        kdialog = KanoDialog("Failed to share!")
        kdialog.run()

        error = 'Error: {}'.format(filepath, msg)
        logger.error(error)
        exit(error)
    increment_app_state_variable_with_dialog(app_name, 'shared', 1)


def show_shares():
    # Create style sheet
    apply_common_to_screen()

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
