#!/usr/bin/env python

# kano-login-dialog.py
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# UI for login screen

from gi.repository import Gtk, Gdk
import os
import sys

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.utils import run_cmd
from kano.network import is_internet

from kano_profile_gui.paths import css_dir
from kano_share.components import top_bar
from kano.world import login_using_token


class MainWindow(Gtk.Window):

    def __init__(self):
        # Create main window
        Gtk.Window.__init__(self, title='Kano Share')
        self.WINDOW_HEIGHT = 600
        self.WINDOW_WIDTH = 400

        self.grid = Gtk.Grid()
        self.add(self.grid)

        self.set_size_request(self.WINDOW_WIDTH, self.WINDOW_HEIGHT)

        # Remove decoration
        self.set_decorated(True)
        self.set_position(Gtk.WindowPosition.CENTER)

        # Top bar
        self.top_bar = top_bar.Top_bar(self.WINDOW_WIDTH)
        self.grid.attach(self.top_bar.background, 0, 0, 3, 1)

        # Box
        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)

        self.equipped_box = Gtk.EventBox()
        self.equipped_box.get_style_context().add_class("equipped_box")
        self.equipped_box.set_visible_window(False)
        self.equipped_label = Gtk.Label('Sample title')
        self.equipped_label.get_style_context().add_class("equipped_label")
        self.equipped_box.add(self.equipped_label)
        self.equipped_box.set_size_request(400, 80)

        self.box.pack_start(self.equipped_box, False, False, 5)
        self.grid.attach(self.box, 1, 1, 1, 1)


def main():
    if not is_internet():
        sys.exit('No internet')

    success, value = login_using_token()
    if not success:
        run_cmd(dir_path + '/bin/kano-login')
        success, value = login_using_token()
        if not success:
            sys.exit('Login not possible, error: ' + value)

    # Create style sheet
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(css_dir, 'share.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
