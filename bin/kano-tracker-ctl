#!/usr/bin/env python

# kano-tracker-ctl
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: GNU GPL v2 http://www.gnu.org/licenses/gpl-2.0.txt
#

"""
kano-tracker-ctl is a controller for kano-tracker.

Usage:
  kano-tracker-ctl status
  kano-tracker-ctl clear [-f]
  kano-tracker-ctl refresh [-w]
  kano-tracker-ctl session (start|end) <name> <pid>
  kano-tracker-ctl session log <name> <started> <length>
  kano-tracker-ctl session run <name> <command>
  kano-tracker-ctl (+1|action) <name>
  kano-tracker-ctl data <name> <value>
  kano-tracker-ctl generate <event>
  kano-tracker-ctl new-token
  kano-tracker-ctl -h|--help
  kano-tracker-ctl --version

 Options:
   -h, --help       Show this message.
   --version        Print the version.
   -w, --watch      Keep refreshing the tracking data periodically.
   -f, --force      Force cleanup
"""

import sys
import os
import docopt
import json
import time
import math

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_profile.paths import tracker_dir, tracker_events_file
from kano_profile.tracker import open_locked, session_start, session_end, \
    get_session_file_path, track_action, track_data, get_session_event, \
    session_log, generate_tracker_token, load_token, get_utc_offset, \
    track_subprocess
from kano.logging import logger
from kano.utils import delete_file, ensure_dir, is_running
from kano.colours import decorate_string_only_terminal
from kano_profile.tracking_events import event_templates


def show_status():
    """ Show running session that are being tracked at the moment. """

    _process_session_data(_show_session_cb)


def update_status(watch=False):
    if not watch:
        logger.warn("Running refresh outside of the daemon loop " +
                    "can result in imprecise data.")
        return _do_update_status()

    MINUTES = 60

    runs = 0
    time_prev = time.time()
    sleep_for = 0
    while True:
        logger.info("Updating session tracking data")

        time_now = time.time()
        time_diff = time_now - time_prev - sleep_for
        if math.fabs(time_diff) > 10:
            msg = "The system time changed " + \
                  "({} secs difference).".format(time_diff)
            logger.warn(msg)

            # Trigger an event about this
            track_data('system-time-changed', {
                'original': time_prev + sleep_for,
                'new': time_now
            })

            correct_sessions(time_diff, time_prev, sleep_for)
            correct_events(time_diff)

        _do_update_status()

        if runs < 15:                 # every 2 minutes for 20 minutes
            sleep_for = 2 * MINUTES
        else:
            sleep_for = 5 * MINUTES

        time_prev = time_now
        logger.debug("Sleeping for {} minutes.".format(sleep_for/MINUTES))
        time.sleep(sleep_for)

        runs += 1


def correct_sessions(time_diff, last_refresh, refresh_interval):
    logger.debug("Correcting sessions")
    _process_session_data(_correct_session_cb, time_diff, time.time(),
                          refresh_interval)


def _correct_session_cb(path, session, time_diff, time_now, refresh_interval):
    if math.fabs(session['started'] - time_now) <= refresh_interval:
        # The session was started after the time change,
        # it doesn't need adjusting.
        logger.debug(("The '{}' session was started after the time change, " +
                     "leaving the time unchanged.").format(session['name']))
        return

    session['started'] += int(time_diff)

    if 'finished' not in session or not session['finished']:
        session['elapsed'] = time_now - session['started']
    else:
        if session['elapsed'] <= 0 or session['elapsed'] >= refresh_interval:
            session['elapsed'] -= time_diff

    msg = "Adjusting the running " + \
          "'{}' session by {} secs.".format(session['name'], time_diff)
    logger.debug(msg)

    # WARNING: Don't use open_locked, the file has been locked already.
    with open(path, "w") as f:
        json.dump(session, f)


def correct_events(time_diff):
    logger.debug("Correcting events")
    with open_locked(tracker_events_file, 'r') as rf:
        entries = rf.readlines()

        token = load_token()
        with open(tracker_events_file, 'w') as wf:
            for entry in entries:
                entry_data = json.loads(entry)
                if 'token' in entry_data and entry_data['token'] == token:
                    entry_data['time'] += int(time_diff)
                    entry_data['timezone_offset'] = get_utc_offset()
                    entry = json.dumps(entry_data) + "\n"
                    logger.debug("Adjusting event after a timechange: " +
                                 "type={} name={}".format(entry_data['type'],
                                                          entry_data['name']))
                wf.write(entry)


def clear_sessions():
    done = _process_session_data(lambda path, session: session)

    MB = 1024*1024

    # Halve the events file if it grows too big
    if os.path.getsize(tracker_events_file) > 2*MB:
        with open_locked(tracker_events_file, 'r') as rf:
            entries = rf.readlines()

            with open(tracker_events_file, 'w') as wf:
                for entry in entries[len(entries)/2:]:
                    wf.write(entry)

    with open_locked(tracker_events_file, 'a') as af:
        for path, session in done.iteritems():
            if not session:
                continue

            event = get_session_event(session)
            af.write(json.dumps(event) + "\n")

            delete_file(path)


def generate_event(event_name):
    """ Generates one of the predefined events.

        :param event_name: The identifier of the event.
        :type event_name: str
    """

    if event_name in event_templates:
        event_templates[event_name]()
    else:
        sys.exit("ERROR: Unknown event template.")


def _do_update_status():
    """ Reads all the session data and updates them.

        If a session has ended, it will collect the file and trigger
        an event.
    """
    done = _process_session_data(_update_session_cb)

    with open_locked(tracker_events_file, 'a') as af:
        for path, session in done.iteritems():
            if not session:
                continue

            event = get_session_event(session)
            af.write(json.dumps(event) + "\n")

            delete_file(path)


def _show_session_cb(path, session):
    """ Processing callback for show_status().

        It is used with _process_session_data().

        :param path: The location of the session file.
        :type path: str

        :param session: The corresponding session data.
        :type session: dict
    """

    if not session:
        return

    heading = "{}[{}]".format(
        decorate_string_only_terminal(session['name'], 'extended(208)'),
        decorate_string_only_terminal(session['pid'], 'extended(244)')
    )

    status = ""
    if _is_pid_running(int(session['pid'])) or int(session['pid']) == 0:
        status = decorate_string_only_terminal('ACTIVE', 'extended(119)',
                                               bold=True)
    else:
        if 'finished' in session and session['finished']:
            status = decorate_string_only_terminal('FINISHED', 'extended(75)',
                                                   bold=True)
        else:
            status = decorate_string_only_terminal('CRASHED', 'extended(160)',
                                                   bold=True)

    print "{} {} {} seconds".format(heading, status, session['elapsed'])


def _update_session_cb(path, session):
    """ Processing callback for update_status().

        It is used with _process_session_data().

        :param path: The location of the session file.
        :type path: str

        :param session: The corresponding session data.
        :type session: dict
    """

    if not session:
        # The file could not be read and is probably corrupted: remove it.
        delete_file(path)
        return

    if 'finished' in session and session['finished'] is True:
        # Return the session to the parent function to be added to the
        # tracking store.
        msg = "Collecting a finished '{}' session".format(session['name'])
        logger.debug(msg)
        return session

    if int(session['pid']) == 0 or _is_pid_running(int(session['pid'])):
        msg = "Updating an active '{}' session".format(session['name'])
        logger.debug(msg)

        session['elapsed'] = int(time.time() - session['started'])

        # WARNING: Don't use open_locked, the file has been locked already.
        with open(path, "w") as f:
            json.dump(session, f)

    else:
        # Application is not running, but not marked finished.
        # Return it as finished to be handled and removed.
        msg = "Collecting a crashed '{}' session".format(session['name'])
        logger.debug(msg)
        return session

    return


def _process_session_data(callback, *args):
    """ Calls the function passed for each session file.

        They can be either running, crashed or finished, the user is
        expected to test that based on the pid.

        :param callback: The function to call on each session file. The
            callback should be as quick as possible as the file remains
            locked throughout the execution time.
        :type callback: function(path, session)

        :returns: Values indexed by the path to its session file.
        :rtype: dict
    """

    ensure_dir(tracker_dir)

    rvs = {}
    for name in os.listdir(tracker_dir):
        path = os.path.join(tracker_dir, name)

        if not os.path.isfile(path):
            continue

        with open_locked(path, 'r') as f:
            try:
                session = json.load(f)
            except:
                # Cannot read the file
                session = None

            rvs[path] = callback(path, session, *args)

    return rvs


def _is_pid_running(pid):
    """ Check For the existence of a unix pid. """

    return os.path.exists("/proc/{}".format(pid))


def main():
    args = docopt.docopt(__doc__, version='1.3')

    if args['status']:
        show_status()
    elif args['clear']:
        if not args['--force'] and \
           is_running("kano-tracker-ctl refresh --watch"):
            msg = "The kano-tracker daemon is running in the background, " + \
                  "not cleaning up. You can force the cleanup with -f."
            logger.error(msg)
            sys.exit(msg)

        clear_sessions()
    elif args['refresh']:
        update_status(args['--watch'])
    elif args['session']:
        if args['start']:
            session_start(args['<name>'], args['<pid>'])
        elif args['end']:
            session_end(get_session_file_path(args['<name>'], args['<pid>']))
        elif args['log']:
            session_log(args['<name>'], args['<started>'], args['<length>'])
        elif args['run']:
            track_subprocess(args['<name>'], args['<command>'])
    elif args['+1'] or args['action']:
        track_action(args['<name>'])
    elif args['generate']:
        generate_event(args['<event>'])
    elif args['new-token']:
        token = generate_tracker_token()
        logger.info("New tracker token generated {}".format(token))
    elif args['data']:
        try:
            value = json.loads(args['<value>'])
        except ValueError:
            value = args['<value>']

        track_data(args['<name>'], value)

    return 0


if __name__ == "__main__":
    sys.exit(main())
