#!/usr/bin/env python

# kano-sync
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import os
import sys
import argparse
import time
import tempfile
from sys import platform as _platform

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_world.functions import sync, login_using_token, backup_content, \
    restore_content, upload_tracking_data
from kano.utils import get_home, ensure_dir, run_cmd, read_json, delete_file, \
    run_bg, is_gui, delete_dir
from kano_profile.paths import app_profiles_file
from kano.logging import logger
from kano_profile.profile import load_profile, save_profile
from kano.notifications import display_generic_notification

home_dir = get_home()

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--silent', action='store_true', help='silent mode')
parser.add_argument('-d', '--dialog', action='store_true',
                    help='display dialog')
parser.add_argument('--sync', action='store_true', help='sync profile data')
parser.add_argument('--upload-tracking-data', action='store_true',
                    help='upload tracking data')
parser.add_argument('--backup', action='store_true', help='backup app content')
parser.add_argument('--restore', action='store_true',
                    help='restore app content')
parser.add_argument('--skip-kdesk', action='store_true',
                    help='skip kdesk refresh')
args = parser.parse_args()

enable_dialog = args.dialog and is_gui()


def display_msg(msg, level):
    if enable_dialog:
        from kano.gtk3.kano_dialog import KanoDialog

        kdialog = KanoDialog(msg, "")
        kdialog.run()

    if level == 'info':
        logger.info(msg)
    elif level == 'error':
        logger.error(msg)


def do_login():
    logger.debug('do_login')

    # login first with token, if not working then try with dialog
    # do not show dialog if in silent mode
    login_success, value = login_using_token()
    if not login_success:
        logger.debug('token login not successful')
        if args.silent:
            logger.debug('exiting because of --silent')
            sys.exit()
        else:
            logger.debug('trying to log in with kano-login')
            run_cmd(dir_path + '/bin/kano-login')
            login_success, value = login_using_token()
            if not login_success:
                display_msg('Login not possible, error: ' + value, 'error')
                sys.exit(1)


def _should_display_notifications(profile):
    if 'last_notifications_prompt' not in profile:
        return True

    NOTIFY_INTERVAL = 60*60*12  # 12 hours in seconds
    time_since_last_notification = (time.time() -
                                    int(profile['last_notifications_prompt']))
    return time_since_last_notification > NOTIFY_INTERVAL

def _any_notifications_available(profile):
    return ('notifications' in profile and
            type(profile['notifications']) is list and
            len(profile['notifications']) > 0)

def do_sync():
    logger.debug('do_sync')

    success, value = sync()
    if not success:
        display_msg('Sync not possible, error: {}'.format(value), 'error')
        return

    refresh_kdesk()

    # Push notifications
    try:
        profile = load_profile()
        if _should_display_notifications(profile):
            if _any_notifications_available(profile):
                for n in profile['notifications']:
                    image = n["image"] if "image" in n else None
                    command = n["command"] if "command" in n else None
                    sound = n["sound"] if "sound" in n else None
                    display_generic_notification(n["title"], n["byline"],
                                                 image, command, sound,
                                                 "world")

                profile['last_notifications_prompt'] = int(time.time())
                save_profile(profile)
            else:
                logger.debug('No notifications to show')
        else:
            logger.debug('Too early to show notifications')
    except Exception as e:
        logger.warn("Unable to display notifications due to an exception "
                    "({}: {})".format(e.__class__.__name__, str(e)))

    display_msg('Sync OK', 'info')


def do_backup():
    logger.debug('do_backup')

    os.chdir(home_dir)

    folders = []
    app_profiles_data = read_json(app_profiles_file)
    for key, values in app_profiles_data.iteritems():
        if 'dir' in values:
            dir_path = values['dir']
            if os.path.exists(dir_path):
                folders.append(values['dir'])
    if not folders:
        return

    tmp_dir = tempfile.mkdtemp()
    tmp_file = os.path.join(tmp_dir, 'backup.tar.gz')
    delete_file(tmp_file)

    tar_cmd = 'tar -czf {tmp_file} {folders} --exclude=webload'.format(
        tmp_file=tmp_file, folders=' '.join(folders))
    if _platform == 'darwin':
        tar_cmd = 'g' + tar_cmd
    _, e, _ = run_cmd(tar_cmd)
    if e:
        msg = 'Error with compressing backup data: {}'.format(e)
        display_msg(msg, 'error')
        delete_dir(tmp_dir)
        return

    success, error = backup_content(tmp_file)
    if not success:
        msg = 'Error with uploading backup data: {}'.format(e)
        display_msg(msg, 'error')
    else:
        display_msg('Backup OK', 'info')

    delete_file(tmp_file)
    delete_dir(tmp_dir)


def do_restore():
    logger.debug('do_restore')

    os.chdir(home_dir)

    tmp_dir = tempfile.mkdtemp()
    tmp_file = os.path.join(tmp_dir, 'restore.tar.gz')
    delete_file(tmp_file)

    success, error = restore_content(tmp_file)
    if not success:
        msg = 'Error with downloading restore data: ' + error
        display_msg(msg, 'error')
        delete_dir(tmp_dir)
        return

    if _platform == 'darwin':
        tar_cmd = 'gtar -xzf {} --skip-old-files'.format(tmp_file)
    else:
        tar_cmd = 'tar -kxzf {}'.format(tmp_file)

    _, e, _ = run_cmd(tar_cmd)
    if e:
        msg = 'Error with uncompressing restore data: {}'.format(e)
        display_msg(msg, 'error')

    refresh_kdesk()

    delete_file(tmp_file)
    delete_dir(tmp_dir)

    display_msg('Restore OK', 'info')


def do_upload_tracking_data():
    logger.debug('do_upload_tracking_data')

    success, value = upload_tracking_data()
    if not success:
        display_msg('Upload not possible, error: {}'.format(value), 'error')
        return


def refresh_kdesk():
    if args.skip_kdesk:
        return

    logger.info('refreshing kdesk from kano-sync')
    if os.path.exists('/usr/bin/kdesk'):
        run_bg('kdesk -a profile ; kdesk -a world')


if __name__ == '__main__':
    if not (args.sync or args.backup or args.restore or args.upload_tracking_data):
        parser.print_help()
        sys.exit()

    do_login()

    if args.sync:
        do_sync()

    if args.backup:
        do_backup()

    if args.restore:
        do_restore()

    if args.upload_tracking_data:
        do_upload_tracking_data()
