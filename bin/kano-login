#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# UI for login screen

from gi.repository import Gtk, Gdk
import os
import sys

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano_profile_gui.paths import css_dir
from kano_login import login, first_screen, gender, birthday, register, account_confirm
from kano_login.components import top_bar, heading
#from kano.world.functions import is_registered
from kano.world.functions import login_using_token


refs = {
    0: [first_screen, login],
    1: gender,
    2: birthday,
    3: register,
    4: account_confirm,
}


# if flow is not None, this is passed from kano-settings
class MainWindow(Gtk.Window):

    def __init__(self, flow=None):

        # Create main window
        Gtk.Window.__init__(self, title='Kano Login')
        self.WINDOW_HEIGHT = 380
        self.WINDOW_WIDTH = 500

        self.last_level_visited = 0

        self.flow = 1
        # flow = 0 or 1 depending on whether it was launched from kano-settings
        if flow is not None:
            self.flow = flow

        self.username = ""
        self.email = ""
        self.password = ""
        self.birthday = ""
        self.age = 0
        self.gender = ""

        # The state is the current window showing
        self.state = 0

        self.grid = Gtk.Grid()
        self.add(self.grid)

        self.set_size_request(self.WINDOW_WIDTH, self.WINDOW_HEIGHT)

        # Remove decoration
        self.set_decorated(False)
        self.set_position(Gtk.WindowPosition.CENTER)

        # Dynamic box
        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)

        self.top_bar = top_bar.Top_bar(self.WINDOW_WIDTH)
        self.top_bar.prev_button.connect("clicked", self.on_prev)
        self.top_bar.next_button.connect("clicked", self.on_next)

        self.grid.attach(self.top_bar.background, 0, 0, 3, 1)
        self.grid.attach(self.box, 1, 1, 1, 1)

        self.top_bar.set_prev_callback(self.on_prev)

        # init home screen
        if flow is not None:
            self.flow = flow
            first_screen.activate(self, self.box)

        # go directly to login
        else:
            for i in self.box.get_children():
                self.box.remove(i)

            login.activate(self, self.box)
            self.show_all()

    def on_prev(self, arg=None):
        self.clear_box()
        self.state = self.state - 1
        print self.state
        module = refs[self.state]
        if self.state == 0:
            module = refs[0][self.flow]
            self.top_bar.disable_prev()
        self.goto(self.box, module)

    def on_next(self, arg=None):
        self.clear_box()
        self.state = self.state + 1
        module = refs[self.state]
        if self.state == 0:
            module = refs[0][self.flow]
        self.on_prev.set_sensitive(False)
        self.goto(self.box, module)

    def goto(self, box, module):
        self.clear_box()
        module.activate(self, self.box)

    def clear_box(self):
        for i in self.box.get_children():
            self.box.remove(i)


def logged_in_screen():
    win = Gtk.Window()
    win.set_size_request(200, 150)
    win.set_decorated(False)
    button = Gtk.Button("OK")
    button.get_style_context().add_class("green_button")
    button.connect("clicked", Gtk.main_quit)
    button_box = Gtk.Box()
    button_box.add(button)
    alignment = Gtk.Alignment(xscale=1, yscale=1, xalign=0.5, yalign=0.5)
    alignment.add(button_box)
    alignment.set_padding(0, 0, 65, 0)
    title = heading.Heading("Logged in!", "You're already logged in")
    main_container = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
    win.add(main_container)
    main_container.pack_start(title.container, False, False, 0)
    main_container.pack_start(alignment, False, False, 0)
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()


def main():
    # Create style sheet
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(css_dir, 'login.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    success, _ = login_using_token()
    if success:
        logged_in_screen()
        Gtk.main()

    else:
        flow = None
        if len(sys.argv) > 2 and sys.argv[1] == 'flow':
            flow = int(sys.argv[2])

        win = MainWindow(flow)
        win.connect('delete-event', Gtk.main_quit)
        win.show_all()
        Gtk.main()


if __name__ == '__main__':
    main()
