#!/usr/bin/env python

# kano-profile-gui
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

import os
import sys
from gi.repository import Gtk, Gdk, GObject

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.network import is_internet
from kano.logging import logger
from kano_world.functions import register as register_
from kano_profile.tracker import save_hardware_info, save_kano_version
from kano_profile.paths import bin_dir, legal_dir
from kano_profile.profile import save_profile_variable
from kano.utils import run_bg

from kano.gtk3.application_window import ApplicationWindow
from kano.gtk3.heading import Heading
from kano.gtk3.apply_styles import apply_colours_to_screen
from kano.gtk3.kano_dialog import KanoDialog

from kano_avatar_gui.PageControl import PageControl
from kano_avatar_gui.CharacterCreator import CharacterCreator
from kano_avatar_gui.ImageView import ImageView
from kano_avatar_gui.GetData import GetData2, GetData3
from kano_avatar.paths import CSS_PATH

try:
    from kano_profile.tracker import Tracker
    kanotracker = Tracker()
except:
    pass


class MainWindow(ApplicationWindow):
    _list_of_categories = []
    _list_of_comboxes = []
    _grid = None

    def __init__(self):
        ApplicationWindow.__init__(self, 'Avatar', 900, 900)
        self.connect("delete-event", Gtk.main_quit)
        self._vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_main_widget(self._vbox)

        # This is what we fill up as we get data
        self.data = {}

        # Styling
        self._manage_styling()

        # Series of buttons controlling the pages
        self.page_control = PageControl(3, 1)
        self._vbox.pack_end(self.page_control, False, False, 0)
        self.page_control.set_margin_bottom(35)
        self.page_control.connect('back-button-clicked', self._go_to_page)
        self.page_control.connect('next-button-clicked', self._go_to_page)

        self._page = Page1(self)
        self._vbox.pack_start(self._page, False, False, 0)

        self.show_all()

    def _manage_styling(self):
        apply_colours_to_screen()

        screen = Gdk.Screen.get_default()
        specific_css_provider = Gtk.CssProvider()
        specific_css_provider.load_from_path(CSS_PATH)
        specific_style_context = Gtk.StyleContext()
        specific_style_context.add_provider_for_screen(
            screen,
            specific_css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_USER
        )
        style = self.get_style_context()
        style.add_class('main_window')

    def _go_to_page(self, widget, index):

        if index > 3:
            # skip
            return

        self._vbox.remove(self._page)
        pages = {1: Page1, 2: Page2, 3: Page3}
        self._page = pages[index](self)
        self._vbox.pack_start(self._page, False, False, 0)
        self.show_all()

    def get_page_control(self):
        return self.page_control


# Page 1 is the character personalisation
class Page1(Gtk.Box):

    def __init__(self, win):
        Gtk.Box.__init__(self, orientation=Gtk.Orientation.VERTICAL)
        self._win = win

        title = Heading('Make your Character', 'Change how the character looks')
        self.pack_start(title.container, False, False, 0)

        self._char_creator = CharacterCreator()
        self.pack_start(self._char_creator, False, False, 0)

        self.save_avatar_assets = self._win.page_control.connect(
            "next-button-clicked",
            self.save_avatar_assets
        )

        self.show_all()

    def save_avatar_assets(self, widget, character):
        self._char_creator.save()
        self._win.page_control.disconnect(self.save_avatar_assets)


class Page2(Gtk.Box):

    def __init__(self, win):
        Gtk.Box.__init__(self, orientation=Gtk.Orientation.VERTICAL)
        self._win = win
        self.page_control = self._win.get_page_control()
        self.page_control.set_next_button_text("NEXT")
        self.page_control.disable_next()

        title = Heading('Make your Avatar', 'Choose clothes and other swag')
        self.pack_start(title.container, False, False, 0)

        # This time we need the picture with the login screen to one side.
        image_viewer = ImageView(self)
        self.pack_start(image_viewer, False, False, 0)

        # Get character image.  This hardcoding needs to be removed
        filename = os.path.join(os.path.expanduser('~'), "avatar-content/avatar.png")
        image_viewer.set_image(filename)

        self.data_screen = GetData2()
        self.data_screen.connect("entries-filled", self.enable_next)
        self._win.page_control.connect("next-button-clicked", self.get_birthday_data)

        # Put it with the same y coordinate as the menu
        image_viewer.put(self.data_screen, 550, 60)
        self.show_all()

    def get_birthday_data(self, widget, event):
        self._win.data = self.data_screen.get_data()

    def enable_next(self, widget):
        self.page_control.enable_next()


class Page3(Gtk.Box):

    def __init__(self, win):
        Gtk.Box.__init__(self, orientation=Gtk.Orientation.VERTICAL)
        self._win = win
        self.page_control = self._win.get_page_control()
        self.page_control.set_next_button_text("COMPLETE")
        self.page_control.disable_next()

        title = Heading('Make your Avatar', 'Choose clothes and other swag')
        self.pack_start(title.container, False, False, 0)

        # This time we need the picture with the login screen to one side.
        image_viewer = ImageView(self)
        self.pack_start(image_viewer, False, False, 0)

        # Get character image
        filename = os.path.join(os.path.expanduser('~'), "avatar-content/avatar.png")
        image_viewer.set_image(filename)

        self.data_screen = GetData3()
        self.data_screen.connect("entries-filled", self.enable_next)

        self.register_cb = self.page_control.connect("next-button-clicked", self.register)
        self.back_cb = self.page_control.connect("back-button-clicked", self.remove_event_listeners)

        # Put it with the same y coordinate as the menu
        image_viewer.put(self.data_screen, 550, 60)
        self.show_all()

    def remove_event_listeners(self, widget, index):
        self.page_control.disconnect(self.register_cb)
        self.page_control.disconnect(self.back_cb)

    def enable_next(self, widget):
        self.page_control.enable_next()

    def register(self, widget=None, arg=None):
        self._win.data.update(self.data_screen.get_data())

        if not is_internet():
            title = "You don't have internet!"
            description = "Connect via wifi or ethernet to register"
            return_value = 0
        else:
            email = self._win.data["email"]
            username = self._win.data["username"]
            password = self._win.data["password"]
            date_year = self._win.data["year"]
            date_month = self._win.data["month"]
            date_day = self._win.data["day"]

            success, text = register_(email, username, password,
                                      date_year, date_month, date_day)

            if not success:
                logger.info('problem with registration: {}'.format(text))
                title = "Houston, we have a problem"
                description = str(text)
                return_value = 0

            else:
                logger.info('registration successful')

                # saving hardware info and initial Kano version
                save_hardware_info()
                save_kano_version()

                # running kano-sync after registration
                logger.info('running kano-sync after successful registration')
                cmd = '{bin_dir}/kano-sync --sync -s'.format(bin_dir=bin_dir)
                run_bg(cmd)

                title = "You've registered!"
                description = "Awesome stuff"
                return_value = 1

        def done(title, description, return_value):
            kdialog = KanoDialog(
                title, description,
                {"OK": {"return_value": return_value}},
                parent_window=self._win
            )
            response = kdialog.run()

            self._win.get_window().set_cursor(None)

            if response == 1:
                print "AWESOME STUFF"

        GObject.idle_add(done, title, description, return_value)


def main():
    win = MainWindow()
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    main()
