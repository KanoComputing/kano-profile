#!/bin/bash

# make-snake
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

# dir="/usr/share/make-snake/__main__.py"
dir="/usr/share/make-snake"

SNAKE_CONTENT=`kano-profile-cli get_app_data_dir make-snake`

function breakline
{
   echo -ne "\n"
}

function header
{
   clear
   echo ".-----------------------------------------------------------."
   echo "|  .---._____     ______     ______     ______     _____    |"
   echo "| (  8  ____ \___/ ____ \___/ ____ \___/ ____ \___/ ____\`=- |"
   echo "|  '---'    \_____/    \_____/    \_____/    \_____/        |"
   echo "|   __  __       _            ____              _           |"
   echo "|  |  \/  | __ _| | _____    / ___| _ __   __ _| | _____    |"
   echo "|  | |\/| |/ _\` | |/ / _ \   \___ \| '_ \ / _\` | |/ / _ \   |"
   echo "|  | |  | | (_| |   <  __/    ___) | | | | (_| |   <  __/   |"
   echo "|  |_|  |_|\__,_|_|\_\___|   |____/|_| |_|\__,_|_|\_\___|   |"
   echo "|                                                           |"
   echo "'-----------------------------------------------------------'"
   breakline
   sleep 1
}

function inputLoop
{
   while true; do
      read -e command
      if [ -z "$command" ]; then
         echo "Need to enter a command: '$1' or 'exit'"
      elif [ "$command" == "$1" ] || [ "$command" == "$2" ]; then
         # Increase stage and save level
         stage=`expr $stage + 1`
         saveLevel $stage
         break
      elif [ "$command" == "exit" ]; then
         exit
      fi
      echo "Type '$1' then [ENTER]"
      breakline
   done
}

function saveLevel
{
   kano-profile-cli save_app_state_variable make-snake level $1
}

function loadLevel
{
   kano-profile-cli load_app_state_variable make-snake level
}


# Disable
# stty intr undef
# stty eof '?'


# Check first level
if [ `loadLevel` == "VARIABLE_NOT_FOUND" ]; then
    saveLevel 1
    stage=1

    # Copy custom theme
    cp /usr/share/make-snake/custom_theme $SNAKE_CONTENT
else
    # Load the level
    stage=`loadLevel`

    if [ ! "$stage" -eq "8" ]; then
       header
       typewriter_echo "Where were we..." 0 2
    fi
fi


# Exercise 1: 'python snake'
if [ "$stage" -eq 1 ]; then
   header
   sleep 1
   typewriter_echo "Snake is one of the oldest and coolest games." 0 2
   typewriter_echo "Eat apples, but don't bite your tail!" 0 2
   typewriter_echo "Ready to make it?" 0 2
   typewriter_echo "Type 'python snake' then [ENTER]" 0 2

   inputLoop 'python snake'
   python -B $dir -m
fi

# Exercise 2: 'python snake -b m'
if [ "$stage" -eq 2 ]; then
   header
   typewriter_echo "Nice!" 0 2
   typewriter_echo "Want to make the game tougher?" 0 2
   typewriter_echo "'python snake' launches the game. Change it by writing parameters after 'python snake'." 0 2
   typewriter_echo "You can make the board smaller with 'python snake -b m'" 0 2

   inputLoop 'python snake -b m' 'python snake --board m'
   python -B $dir -mb m
fi

# Exercise 3: 'python snake -s f'
if [ "$stage" -eq 3 ]; then
   header
   typewriter_echo "Another way to increase difficulty is by changing the speed." 0 2
   typewriter_echo "Let's try a fast game! 'python snake -s f'" 0 2

   inputLoop 'python snake -s f' 'python snake --speed f'
   python -B $dir -ms f
fi

# Exercise 4: 'python snake -t jungle'
if [ "$stage" -eq 4 ]; then
   header
   typewriter_echo "Awesome! You've changed Snake using computer commands." 0 2
   typewriter_echo "Now try changing its theme (how Snake looks)." 0 2
   typewriter_echo "Type 'python snake -t jungle' to play Amazon style!" 0 2

   inputLoop 'python snake -t jungle' 'python snake --theme jungle'
   python -B $dir -mt jungle
fi

# Exercise 5: 'python snake -e'
if [ "$stage" -eq 5 ]; then
   header
   typewriter_echo "Do you know you can even create your own themes?" 0 2
   typewriter_echo "Type 'python snake -e' to access the editor" 0 2

   inputLoop 'python snake -e' 'python snake --editor'
   python -B $dir -me
fi

# Exercise 6: 'python snake -t custom'
if [ "$stage" -eq 6 ]; then
   header
   typewriter_echo "It's looking good!" 0 2
   typewriter_echo "Now type 'python snake -t custom' to play with your design" 0 2

   inputLoop 'python snake -t custom' 'python snake --theme custom'
   python -B $dir -mt custom
fi

# Exercise 7: 'python snake --help'
if [ "$stage" -eq 7 ]; then
   header
   typewriter_echo "Use the help option to learn all the different spells." 0 2
   typewriter_echo "Type 'python snake --help' to get help." 0 2

   inputLoop 'python snake --help' 'python snake -h'
   python -B $dir --help
   breakline
   typewriter_echo "Great! You've completed Make Snake!" 1 2
   python /usr/bin/kano-progress-register "snake"
   typewriter_echo "Press [ENTER] to continue" 0 2
   read
fi

# Playground
if [ "$stage" -eq 8 ]; then
   header
   echo "Playground mode!"
   breakline
   typewriter_echo "Try what you have learnt." 0 2
   # Infinite loop
   while true; do
      # Read command
      read -e command
      # Check for exit command
      if [ "$command" == "exit" ]; then
         exit 0
      fi
      # Check for correct command
      array=($command)
      len="${#array[@]}"
      if [ $len -ge 2 ] && [ ${array[0]} == "python" ] && [ ${array[1]} == "snake" ]; then
          # Parse commands
          param=""
          space=" "
          for (( index=2; index<$len; index++ )); do
              param=${param}${array[$index]}${space}
          done
          # Launch game
          python -B $dir $param
          # Check for --help command
          if [ $param == "--help" ]; then
              breakline
          else
              # Clean terminal + header
              header
              echo "Playground mode!"
              echo "Remember: type 'python snake --help' for help or 'exit' to quit."
              breakline
          fi
      else
          typewriter_echo "Need help? Type 'python snake --help' or 'exit' to finish." 0 2
      fi
   done
fi

exit 0
