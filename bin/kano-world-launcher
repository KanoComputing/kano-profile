#!/usr/bin/kano-splash /usr/share/kano-profile/media/images/splash.png /usr/bin/env python

# kano-world-launcher
#
# Copyright (C) 2014, 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
#
# This is here only in case we'd like to track something here

import os
import sys
from kano.utils import run_cmd, run_bg, get_home, read_json, write_json, ensure_dir
from kano_world.functions import get_token, is_registered
from kano_world.config import WORLD_URL
from kano.logging import logger
from kano.network import is_internet
from kano_profile.tracker import Tracker
from kano_profile.apps import save_app_state_variable
from kano_profile.quests import Quests

chromium_folder = os.path.join(get_home(), '.config/chromium/')
chromium_local_state = os.path.join(chromium_folder, 'Local State')

kanotracker = Tracker()

# Trigger a quest event
save_app_state_variable('kano-world-launcher', 'opened', True)
Quests().trigger_event('kano-world-launched')

def modify_local_state():
    logger.info('modify_local_state')
    data = read_json(chromium_local_state)

    try:
        data['protocol_handler']['excluded_schemes']['kano'] = False
    except Exception:
        data['protocol_handler'] = {
            'excluded_schemes': {
                'kano': False
            }
        }

    write_json(chromium_local_state, data)


def create_local_state():
    logger.info('create_local_state')
    ensure_dir(chromium_folder)
    data = {
        'protocol_handler': {
            'excluded_schemes': {
                'kano': False
            }
        }
    }
    write_json(chromium_local_state, data)

# Check internet status
if not is_internet():
    # Close splash before launching settings
    os.system('kano-stop-splash')
    # Launch WiFi config
    os.system('sudo /usr/bin/kano-settings 12')
    sys.exit()

# Check for Kano World login
if not is_registered():
    # Close splash before launching login screen
    os.system('kano-stop-splash')
    # Launch login screen
    os.system('/usr/bin/kano-login 3')

# Check local state
if os.path.exists(chromium_local_state):
    try:
        modify_local_state()
    except Exception:
        create_local_state()
else:
    create_local_state()

# Check for redirection
redirect = ""
if len(sys.argv) >= 2:
    redirect = "?redirect={}".format(sys.argv[1])

# Launch Chromium, and then kano-stop-splash once the window is mapped
run_cmd("xtoolwait -timeout 5000000 chromium --window-size=1000,700 --app={}/login/{}{}; kano-stop-splash"
        .format(WORLD_URL, get_token(), redirect))

# sync
run_bg('kano-sync --sync -s')
